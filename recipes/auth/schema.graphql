"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

type Authenticated {
  user: User
}

type Comment implements Node {
  commenter: User
  content: String
  id: ID!
}

type CommentPosted {
  comment: Comment!
}

type CreatePostError implements Error {
  message: String
}

union CreatePostResult = CreatePostError | PostCreated

interface Error {
  message: String
}

type LoggedIn {
  user: User!
}

type LoggedOut {
  message: String
}

type LogInError implements Error {
  message: String
}

union LoginResult = LogInError | LoggedIn

type Mutation {
  createPost(content: String!, title: String!): CreatePostResult
  logIn(password: String!, username: String!): LoginResult
  logout: LoggedOut
  postComment(content: String!, postNodeId: ID!): PostCommentResult
  register(email: String!, password: String!): RegisterResult
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: ID
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: ID
}

type Post implements Node {
  comments(after: ID, before: ID, first: Int, last: Int): PostCommentsConnection
  content: String
  id: ID!
  poster: User
  title: String
}

type PostCommentError implements Error {
  message: String
}

union PostCommentResult = CommentPosted | PostCommentError

type PostCommentsConnection {
  edges: [PostCommentsConnectionEdge]!
  pageInfo: PageInfo!
}

type PostCommentsConnectionEdge {
  cursor: ID!
  node: Comment!
}

type PostCreated {
  post: Post!
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  posts(after: ID, before: ID, first: Int, last: Int): QueryPostsConnection
  session: Session
}

type QueryPostsConnection {
  edges: [QueryPostsConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryPostsConnectionEdge {
  cursor: ID!
  node: Post!
}

type Registered {
  user: User!
}

union RegisterResult = Registered | RegistrationError

type RegistrationError implements Error {
  message: String
}

union Session = Authenticated | Unauthenticated

type Unauthenticated {
  message: String
}

type User implements Node {
  id: ID!
  username: String
}

